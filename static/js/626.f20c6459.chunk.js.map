{"version":3,"file":"static/js/626.f20c6459.chunk.js","mappings":"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","sources":["views/mint/index.tsx"],"sourcesContent":["import { useEffect, useState, useMemo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport InputNumber from \"rc-input-number\";\nimport { useConnectModal, useAccount } from \"@web3modal/react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport {\n  parseEther,\n  formatEther,\n  formatUnits,\n  parseUnits,\n} from \"@ethersproject/units\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { setErrorMsg } from \"@/store/modules/app\";\n\nimport json from \"@/assets/WorldCupRabbitNFT.json\";\n\nimport \"animate.css\";\nimport \"rc-input-number/assets/index.css\";\n\nimport type { RootState } from \"@/store\";\n\nconst contract_address: string = process.env.REACT_APP_CONTRACT_ADDRESS || \"\";\n\nconst provider = window.ethereum\n  ? new Web3Provider(window.ethereum)\n  : undefined;\nlet contract = new Contract(contract_address, json.abi, provider);\n\nconst price = 0.041;\nconst max = 400;\nconst successInfo = { msg: \"\", hash: \"\" };\n\nconst Mint = () => {\n  const errorMsg = useSelector((state: RootState) => state.app.errorMsg);\n  const dispatch = useDispatch();\n\n  const { open } = useConnectModal();\n  const { account } = useAccount();\n\n  const [paused, setPaused] = useState(false);\n  const [lastCount, setLastCount] = useState(400);\n  const [commonGas, setCommonGas] = useState(\"0\");\n  const [count, setCount] = useState(1);\n  const [move, setMove] = useState(false);\n  const [successMsg, setSuccessMsg] = useState({ ...successInfo });\n\n  const getMintTxParams = async () => {\n    const data = await contract.populateTransaction.mint(count);\n    // const nonce = await contract.signer.getTransactionCount()\n    return {\n      ...data,\n      // nonce,\n      value: parseEther(totalPrice),\n    };\n  };\n\n  const getCommonGas = async () => {\n    const params = await getMintTxParams();\n    try {\n      const bigNumberGas = await contract.signer.estimateGas(params);\n      const gas = formatUnits(bigNumberGas, \"gwei\");\n      setCommonGas(gas);\n    } catch (err: any) {\n      if (err.reason.includes(\"paused\")) {\n        return setPaused(true);\n      }\n      dispatch(setErrorMsg(err.reason));\n      console.dir(err);\n    }\n  };\n\n  const totalPrice = useMemo(() => {\n    if (account.isConnected) {\n      setTimeout(() => {\n        getCommonGas();\n      }, 100);\n    }\n    const _c = BigNumber.from(count);\n\n    const _p = parseUnits(`${price}`);\n\n    return formatEther(_c.mul(_p));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [count, account.isConnected]);\n\n  const getLastCount = async () => {\n    const bigNum = await contract.totalSupply();\n    setLastCount(max - bigNum.toNumber());\n  };\n\n  const mint = async () => {\n    if (!contract.signer) {\n      return open();\n    }\n    setSuccessMsg({ ...successInfo });\n    setMove(true);\n\n    try {\n      const params = await getMintTxParams();\n\n      const tx = await contract.signer.sendTransaction(params);\n\n      const done = await tx.wait();\n\n      if (done.transactionHash) {\n        setSuccessMsg({\n          msg: `Ok! You can see it in your wallet later, or you can check`,\n          hash: done.transactionHash,\n        });\n        getLastCount();\n      }\n      setMove(false);\n    } catch (error: any) {\n      const { action, reason } = error;\n      console.dir(error);\n      // JSON.stringify(error)\n      const msg = reason\n        ? `${action}: ${reason}`\n        : \"An error has occurred. You need to try resetting your account or re importing\";\n\n      dispatch(setErrorMsg(msg));\n      setMove(false);\n    }\n  };\n\n  const handleChange = (nextValue: number | null) => {\n    setCount(nextValue || count);\n  };\n\n  useEffect(() => {\n    if (account.address && provider) {\n      const signer = provider.getSigner(account.address);\n      contract = contract.connect(signer);\n      getLastCount();\n    }\n  }, [account.address]);\n\n  return (\n    <>\n      <div className=\"flex-1 mt-10 sm:mt-32 heng-bg bg-auto sm:bg-contain sm:bg-bottom\">\n        <div className=\"text-center m-auto p-8 bg-white shadow-xl rounded-lg w-11/12 sm:w-9/12 relative\">\n          {paused ? (\n            <>Sorry, We Paused There</>\n          ) : lastCount === 0 ? (\n            <>Sorry, We Soldout</>\n          ) : (\n            <>\n              <div className=\"m-4 p-4 bg-indigo-500 text-white font-bold rounded-lg\">\n                We decided that each wallet can have 10 tokens\n              </div>\n              <div className=\"static sm:absolute connect-font\">\n                You maybe need {totalPrice} + {commonGas} ETH\n              </div>\n              <div className=\"static sm:absolute right-8 font-bold connect-font\">\n                Last {lastCount}/400\n              </div>\n              <div className=\"p-4 pt-10 mb-4\">\n                <InputNumber\n                  className=\"!text-lg !h-10\"\n                  min={1}\n                  max={lastCount}\n                  precision={0}\n                  onChange={handleChange}\n                  value={count}\n                />\n              </div>\n              <button\n                className={`mint-font text-3xl sm:text-5xl animate__animated ${\n                  move ? \"animate__tada\" : \"\"\n                }`}\n                onClick={mint}\n                disabled={move}\n              >\n                Mint {count === 1 ? \"A\" : count} Rabbit{count === 1 ? \"\" : \"s\"}{\" \"}\n                !\n              </button>\n              {!move && (\n                <div className=\"mt-8\">\n                  <span className=\"error-font text-xl break-words\">\n                    {errorMsg}\n                  </span>\n                </div>\n              )}\n              {move && (\n                <div className=\"mt-8\">\n                  <span className=\"green-font text-xl\">\n                    We are mitting, please Wait ...\n                  </span>\n                </div>\n              )}\n              {successMsg.hash && (\n                <div className=\"mt-8 break-words\">\n                  <span className=\"green-font text-xl\">\n                    {successMsg.msg} on{\" \"}\n                    <a\n                      className=\"connect-font\"\n                      href={`https://etherscan.io/tx/${successMsg.hash}`}\n                    >\n                      etherscan\n                    </a>\n                  </span>\n                  <p>{successMsg.hash}</p>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Mint;\n"],"names":["provider","window","ethereum","Web3Provider","undefined","contract","Contract","process","json","successInfo","msg","hash","errorMsg","useSelector","state","app","dispatch","useDispatch","open","useConnectModal","account","useAccount","useState","paused","setPaused","lastCount","setLastCount","commonGas","setCommonGas","count","setCount","move","setMove","successMsg","setSuccessMsg","getMintTxParams","populateTransaction","mint","data","value","parseEther","totalPrice","getCommonGas","params","signer","estimateGas","bigNumberGas","gas","formatUnits","reason","includes","setErrorMsg","console","dir","useMemo","isConnected","setTimeout","_c","BigNumber","_p","parseUnits","formatEther","mul","getLastCount","totalSupply","bigNum","toNumber","sendTransaction","tx","wait","done","transactionHash","action","useEffect","address","getSigner","connect","className","min","max","precision","onChange","nextValue","onClick","disabled","href"],"sourceRoot":""}